import{F as r}from"./flowGraphUnaryOperationBlock-DPL-KGO9.js";import{ai as n,as as s,at as t,aj as F,R as l}from"./index-dzV0rMYg.js";import"./flowGraphCachedOperationBlock-BMFXzeZ-.js";class p extends r{constructor(a){super(F,n,o=>+o,"FlowGraphBooleanToFloat",a)}}l("FlowGraphBooleanToFloat",p);class u extends r{constructor(a){super(F,s,o=>t.FromValue(+o),"FlowGraphBooleanToInt",a)}}l("FlowGraphBooleanToInt",u);class c extends r{constructor(a){super(n,F,o=>!!o,"FlowGraphFloatToBoolean",a)}}l("FlowGraphFloatToBoolean",c);class h extends r{constructor(a){super(s,F,o=>!!o.value,"FlowGraphIntToBoolean",a)}}l("FlowGraphIntToBoolean",h);class w extends r{constructor(a){super(s,n,o=>o.value,"FlowGraphIntToFloat",a)}}l("FlowGraphIntToFloat",w);class G extends r{constructor(a){super(n,s,o=>{switch(a?.roundingMode){case"floor":return t.FromValue(Math.floor(o));case"ceil":return t.FromValue(Math.ceil(o));case"round":return t.FromValue(Math.round(o));default:return t.FromValue(o)}},"FlowGraphFloatToInt",a)}}l("FlowGraphFloatToInt",G);export{p as FlowGraphBooleanToFloat,u as FlowGraphBooleanToInt,c as FlowGraphFloatToBoolean,G as FlowGraphFloatToInt,h as FlowGraphIntToBoolean,w as FlowGraphIntToFloat};
