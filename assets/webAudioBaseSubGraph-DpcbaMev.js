import{b2 as b,L as _,b0 as A}from"./index-DHuikXXi.js";class y extends b{constructor(e,t){super(e,t,3)}connect(e){if(!this._connect(e))throw new Error("Connect failed")}disconnect(e){if(!this._disconnect(e))throw new Error("Disconnect failed")}disconnectAll(){if(!this._downstreamNodes)throw new Error("Disconnect failed");const e=this._downstreamNodes.values();for(let t=e.next();!t.done;t=e.next())if(!this._disconnect(t.value))throw new Error("Disconnect failed")}}const N={volume:1};class z extends y{constructor(e){super("Volume",e)}setOptions(e){this.volume=e.volume??N.volume}}function u(s){return s.getSubNode("Volume")}function D(s,e){return u(s)?.[e]??N[e]}const i={fftSize:2048,minDecibels:-100,maxDecibels:-30,smoothing:.8};function S(s){return s.analyzerEnabled||s.analyzerFFTSize!==void 0||s.analyzerMinDecibels!==void 0||s.analyzerMaxDecibels!==void 0||s.analyzerSmoothing!==void 0}class p{get frequencyBinCount(){return this.fftSize/2}}class g extends y{constructor(e){super("Analyzer",e)}setOptions(e){this.fftSize=e.analyzerFFTSize??i.fftSize,this.minDecibels=e.analyzerMinDecibels??i.minDecibels,this.maxDecibels=e.analyzerMaxDecibels??i.maxDecibels,this.smoothing=e.analyzerSmoothing??i.smoothing}}function r(s){return s.getSubNode("Analyzer")}function d(s,e,t){s.callOnSubNode("Analyzer",n=>{n[e]=t})}let c=null,l=null;function m(){return c||(c=new Uint8Array),c}function f(){return l||(l=new Float32Array),l}class w extends p{constructor(e){super(),this._fftSize=i.fftSize,this._maxDecibels=i.maxDecibels,this._minDecibels=i.minDecibels,this._smoothing=i.smoothing,this._subGraph=e}get fftSize(){return this._fftSize}set fftSize(e){this._fftSize=e,d(this._subGraph,"fftSize",e)}get isEnabled(){return r(this._subGraph)!==null}get minDecibels(){return this._minDecibels}set minDecibels(e){this._minDecibels=e,d(this._subGraph,"minDecibels",e)}get maxDecibels(){return this._maxDecibels}set maxDecibels(e){this._maxDecibels=e,d(this._subGraph,"maxDecibels",e)}get smoothing(){return this._smoothing}set smoothing(e){this._smoothing=e,d(this._subGraph,"smoothing",e)}dispose(){const e=r(this._subGraph);e&&(this._subGraph.removeSubNodeAsync(e),e.dispose())}async enableAsync(){r(this._subGraph)||await this._subGraph.createAndAddSubNodeAsync("Analyzer")}getByteFrequencyData(){const e=r(this._subGraph);return e?e.getByteFrequencyData():(_.Warn("AudioAnalyzer not enabled"),this.enableAsync(),m())}getFloatFrequencyData(){const e=r(this._subGraph);return e?e.getFloatFrequencyData():(_.Warn("AudioAnalyzer not enabled"),this.enableAsync(),f())}}class V extends b{constructor(e,t,n){super(e,t,n),this._analyzer=null}get analyzer(){return this._analyzer??(this._analyzer=new w(this._subGraph))}get volume(){return D(this._subGraph,"volume")}set volume(e){const t=u(this._subGraph);if(!t)throw new Error("No volume subnode");t.volume=e}dispose(){super.dispose(),this._analyzer?.dispose(),this._analyzer=null,this._subGraph.dispose()}setVolume(e,t=null){const n=u(this._subGraph);if(!n)throw new Error("No volume subnode");n.setVolume(e,t)}}class F{constructor(){this._createSubNodePromises={},this._isDisposed=!1,this._subNodes={},this._onSubNodeDisposed=e=>{const t=e;delete this._subNodes[t.name],this._onSubNodesChanged()}}callOnSubNode(e,t){const n=this.getSubNode(e);if(n){t(n);return}this._createSubNodePromisesResolvedAsync().then(()=>{const o=this.getSubNode(e);if(o){t(o);return}this.createAndAddSubNodeAsync(e).then(a=>{t(a)})})}createAndAddSubNodeAsync(e){var t;return(t=this._createSubNodePromises)[e]||(t[e]=this._createSubNode(e).then(n=>(this._addSubNode(n),n))),this._createSubNodePromises[e]}dispose(){this._isDisposed=!0;const e=Object.values(this._subNodes);for(const t of e)t.dispose();this._subNodes={},this._createSubNodePromises={}}getSubNode(e){return this._subNodes[e]??null}async removeSubNodeAsync(e){await this._createSubNodePromisesResolvedAsync();const t=e.name;this._subNodes[t]&&delete this._subNodes[t],delete this._createSubNodePromises[t],this._onSubNodesChanged()}async _createSubNodePromisesResolvedAsync(){return await Promise.all(Object.values(this._createSubNodePromises))}_addSubNode(e){if(this._isDisposed){e.dispose();return}this._subNodes[e.name]=e,e.onDisposeObservable.addOnce(this._onSubNodeDisposed),this._onSubNodesChanged()}}async function x(s){return new q(s)}class q extends z{constructor(e){super(e);const t=this.node=new GainNode(e._audioContext);this._volume=new A(e,t.gain)}dispose(){super.dispose(),this._volume.dispose()}get volume(){return this._volume.value}set volume(e){this.setVolume(e)}get _inNode(){return this.node}get _outNode(){return this.node}setVolume(e,t=null){this._volume.setTargetValue(e,t)}_connect(e){return super._connect(e)?(e._inNode&&this.node.connect(e._inNode),!0):!1}_disconnect(e){return super._disconnect(e)?(e._inNode&&this.node.disconnect(e._inNode),!0):!1}getClassName(){return"_VolumeWebAudioSubNode"}}async function v(s){return new G(s)}class G extends g{constructor(e){super(e),this._byteFrequencyData=null,this._floatFrequencyData=null,this._analyzerNode=new AnalyserNode(e._audioContext)}get fftSize(){return this._analyzerNode.fftSize}set fftSize(e){e!==this._analyzerNode.fftSize&&(this._analyzerNode.fftSize=e,this._clearArrays())}get _inNode(){return this._analyzerNode}get minDecibels(){return this._analyzerNode.minDecibels}set minDecibels(e){this._analyzerNode.minDecibels=e}get maxDecibels(){return this._analyzerNode.maxDecibels}set maxDecibels(e){this._analyzerNode.maxDecibels=e}get smoothing(){return this._analyzerNode.smoothingTimeConstant}set smoothing(e){this._analyzerNode.smoothingTimeConstant=e}dispose(){super.dispose(),this._clearArrays(),this._byteFrequencyData=null,this._floatFrequencyData=null,this._analyzerNode.disconnect()}getClassName(){return"_WebAudioAnalyzerSubNode"}getByteFrequencyData(){return(!this._byteFrequencyData||this._byteFrequencyData.length===0)&&(this._byteFrequencyData=new Uint8Array(this._analyzerNode.frequencyBinCount)),this._analyzerNode.getByteFrequencyData(this._byteFrequencyData),this._byteFrequencyData}getFloatFrequencyData(){return(!this._floatFrequencyData||this._floatFrequencyData.length===0)&&(this._floatFrequencyData=new Float32Array(this._analyzerNode.frequencyBinCount)),this._analyzerNode.getFloatFrequencyData(this._floatFrequencyData),this._floatFrequencyData}_clearArrays(){this._byteFrequencyData?.set(m()),this._floatFrequencyData?.set(f())}}class E extends F{constructor(e){super(),this._outputNode=null,this._owner=e}async initAsync(e){const t=S(e);if(t&&await this.createAndAddSubNodeAsync("Analyzer"),await this.createAndAddSubNodeAsync("Volume"),await this._createSubNodePromisesResolvedAsync(),t){const o=r(this);if(!o)throw new Error("No analyzer subnode.");o.setOptions(e)}const n=u(this);if(!n)throw new Error("No volume subnode.");if(n.setOptions(e),n.getClassName()!=="_VolumeWebAudioSubNode")throw new Error("Not a WebAudio subnode.");if(this._outputNode=n.node,this._outputNode&&this._downstreamNodes){const o=this._downstreamNodes.values();for(let a=o.next();!a.done;a=o.next()){const h=a.value._inNode;h&&this._outputNode.connect(h)}}}get _inNode(){return this._outputNode}get _outNode(){return this._outputNode}_createSubNode(e){switch(e){case"Analyzer":return v(this._owner.engine);case"Volume":return x(this._owner.engine);default:throw new Error(`Unknown subnode name: ${e}`)}}_onSubNodesChanged(){const e=r(this),t=u(this);e&&t&&t.connect(e)}}export{V as A,y as _,E as a,u as b};
