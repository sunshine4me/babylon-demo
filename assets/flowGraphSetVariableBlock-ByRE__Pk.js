import{al as u,af as o,R as p}from"./index-dzV0rMYg.js";class v extends u{constructor(a){if(super(a),!a.variable&&!a.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(a.variables&&a.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(a.variables)for(const e of a.variables)this.registerDataInput(e,o);else this.registerDataInput("value",o)}_execute(a,e){if(this.config?.variables)for(const t of this.config.variables)this._saveVariable(a,t);else this._saveVariable(a,this.config?.variable,"value");this.out._activateSignal(a)}_saveVariable(a,e,t){const i=a._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const s of i){const l=a.assetsContext.animationGroups.find(r=>r.uniqueId==s);if(l){for(const r of l.targetedAnimations)if(r.target===a&&r.animation.targetProperty===e){l.stop();const n=i.indexOf(s);n>-1&&i.splice(n,1),a._setGlobalContextVariable("currentlyRunningAnimationGroups",i);break}}}const b=this.getDataInput(t||e)?.getValue(a);a.setVariable(e,b)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(a){super.serialize(a),a.config.variable=this.config?.variable}}p("FlowGraphSetVariableBlock",v);export{v as FlowGraphSetVariableBlock};
