import{Q as p,a3 as x,V as u,aq as s,aC as c,ae as f,ai as i,aj as y,aD as A,am as F,aE as d,af as h,aw as m,e as C,R as a}from"./index-DHuikXXi.js";import{F as n}from"./flowGraphBinaryOperationBlock-CzUn0bOv.js";import{F as B}from"./flowGraphUnaryOperationBlock-DzhUnKIy.js";import"./flowGraphCachedOperationBlock-DqT8HumH.js";function D(o,e){return Math.acos(x(p.Dot(o,e)))*2}function T(o,e){const r=new p;return N(o,e,r),r}function N(o,e,r){const t=u.Cross(o,e),l=Math.acos(x(u.Dot(o,e),-1,1));return p.RotationAxisToRef(t,l,r),r}const G="cachedOperationAxis",V="cachedOperationAngle",k="cachedExecutionId";class R extends B{constructor(e){super(h,i,r=>this._polymorphicLength(r),"FlowGraphLengthBlock",e)}_polymorphicLength(e){switch(m(e)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return e.length();default:throw new Error(`Cannot compute length of value ${e}`)}}}a("FlowGraphLengthBlock",R);class Q extends B{constructor(e){super(h,h,r=>this._polymorphicNormalize(r),"FlowGraphNormalizeBlock",e)}_polymorphicNormalize(e){const r=m(e);let t;switch(r){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return t=e.normalizeToNew(),this.config?.nanOnZeroLength&&e.length()===0&&t.setAll(NaN),t;default:throw new Error(`Cannot normalize value ${e}`)}}}a("FlowGraphNormalizeBlock",Q);class E extends n{constructor(e){super(h,h,i,(r,t)=>this._polymorphicDot(r,t),"FlowGraphDotBlock",e)}_polymorphicDot(e,r){switch(m(e)){case"Vector2":case"Vector3":case"Vector4":case"Quaternion":return e.dot(r);default:throw new Error(`Cannot get dot product of ${e} and ${r}`)}}}a("FlowGraphDotBlock",E);class _ extends n{constructor(e){super(s,s,s,(r,t)=>u.Cross(r,t),"FlowGraphCrossBlock",e)}}a("FlowGraphCrossBlock",_);class z extends n{constructor(e){super(d,i,d,(r,t)=>r.rotate(t),"FlowGraphRotate2DBlock",e)}}a("FlowGraphRotate2DBlock",z);class O extends n{constructor(e){super(s,c,s,(r,t)=>r.applyRotationQuaternion(t),"FlowGraphRotate3DBlock",e)}}a("FlowGraphRotate3DBlock",O);function I(o,e){switch(m(o)){case"Vector2":return e.transformVector(o);case"Vector3":return e.transformVector(o);case"Vector4":return o=o,new C(o.x*e.m[0]+o.y*e.m[1]+o.z*e.m[2]+o.w*e.m[3],o.x*e.m[4]+o.y*e.m[5]+o.z*e.m[6]+o.w*e.m[7],o.x*e.m[8]+o.y*e.m[9]+o.z*e.m[10]+o.w*e.m[11],o.x*e.m[12]+o.y*e.m[13]+o.z*e.m[14]+o.w*e.m[15]);default:throw new Error(`Cannot transform value ${o}`)}}class L extends n{constructor(e){const r=e?.vectorType||"Vector3",t=r==="Vector2"?"Matrix2D":r==="Vector3"?"Matrix3D":"Matrix";super(F(r),F(t),F(r),I,"FlowGraphTransformVectorBlock",e)}}a("FlowGraphTransformVectorBlock",L);class M extends n{constructor(e){super(s,A,s,(r,t)=>u.TransformCoordinates(r,t),"FlowGraphTransformCoordinatesBlock",e)}}a("FlowGraphTransformCoordinatesBlock",M);class j extends B{constructor(e){super(c,c,r=>r.conjugate(),"FlowGraphConjugateBlock",e)}}a("FlowGraphConjugateBlock",j);class v extends n{constructor(e){super(c,c,i,(r,t)=>D(r,t),"FlowGraphAngleBetweenBlock",e)}}a("FlowGraphAngleBetweenBlock",v);class $ extends n{constructor(e){super(s,i,c,(r,t)=>p.RotationAxis(r,t),"FlowGraphQuaternionFromAxisAngleBlock",e)}}a("FlowGraphQuaternionFromAxisAngleBlock",$);class q extends f{constructor(e){super(e),this.a=this.registerDataInput("a",c),this.axis=this.registerDataOutput("axis",s),this.angle=this.registerDataOutput("angle",i),this.isValid=this.registerDataOutput("isValid",y)}_updateOutputs(e){const r=e._getExecutionVariable(this,k,-1),t=e._getExecutionVariable(this,G,null),l=e._getExecutionVariable(this,V,null);if(t!=null&&l!==void 0&&l!==null&&r===e.executionId)this.axis.setValue(t,e),this.angle.setValue(l,e);else try{const{axis:w,angle:g}=this.a.getValue(e).toAxisAngle();e._setExecutionVariable(this,G,w),e._setExecutionVariable(this,V,g),e._setExecutionVariable(this,k,e.executionId),this.axis.setValue(w,e),this.angle.setValue(g,e),this.isValid.setValue(!0,e)}catch{this.isValid.setValue(!1,e)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}a("FlowGraphAxisAngleFromQuaternionBlock",q);class K extends n{constructor(e){super(s,s,c,(r,t)=>T(r,t),"FlowGraphQuaternionFromDirectionsBlock",e)}}export{v as FlowGraphAngleBetweenBlock,q as FlowGraphAxisAngleFromQuaternionBlock,j as FlowGraphConjugateBlock,_ as FlowGraphCrossBlock,E as FlowGraphDotBlock,R as FlowGraphLengthBlock,Q as FlowGraphNormalizeBlock,$ as FlowGraphQuaternionFromAxisAngleBlock,K as FlowGraphQuaternionFromDirectionsBlock,z as FlowGraphRotate2DBlock,O as FlowGraphRotate3DBlock,L as FlowGraphTransformBlock,M as FlowGraphTransformCoordinatesBlock};
