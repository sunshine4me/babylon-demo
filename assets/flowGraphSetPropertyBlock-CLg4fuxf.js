import{al as l,af as o,R as p}from"./index-dzV0rMYg.js";class c extends l{constructor(t){super(t),this.config=t,this.object=this.registerDataInput("object",o,t.target),this.value=this.registerDataInput("value",o),this.propertyName=this.registerDataInput("propertyName",o,t.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",o)}_execute(t,a){try{const n=this.object.getValue(t),e=this.value.getValue(t),i=this.propertyName.getValue(t);this._stopRunningAnimations(t,n,i);const r=this.customSetFunction.getValue(t);r?r(n,i,e,t):this._setPropertyValue(n,i,e)}catch(n){this._reportError(t,n)}this.out._activateSignal(t)}_stopRunningAnimations(t,a,n){const e=t._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const i of e){const r=t.assetsContext.animationGroups.find(s=>s.uniqueId===i);if(r){for(const s of r.targetedAnimations)if(s.target===a&&s.animation.targetProperty===n){r.stop(!0),r.dispose();const u=e.indexOf(i);u!==-1&&(e.splice(u,1),t._setGlobalContextVariable("currentlyRunningAnimationGroups",e))}}}}_setPropertyValue(t,a,n){const e=a.split(".");let i=t;for(let r=0;r<e.length-1;r++){const s=e[r];i[s]===void 0&&(i[s]={}),i=i[s]}i[e[e.length-1]]=n}getClassName(){return"FlowGraphSetPropertyBlock"}}p("FlowGraphSetPropertyBlock",c);export{c as FlowGraphSetPropertyBlock};
