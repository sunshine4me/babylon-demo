import{ae as M,aq as u,aC as g,aD as w,i as m,aj as T,V as n,Q as x,am as e,ai as k,R as r}from"./index-DHuikXXi.js";import{F as V}from"./flowGraphUnaryOperationBlock-DzhUnKIy.js";import{F as D}from"./flowGraphBinaryOperationBlock-CzUn0bOv.js";import"./flowGraphCachedOperationBlock-DqT8HumH.js";class E extends V{constructor(t){super(e(t?.matrixType||"Matrix"),e(t?.matrixType||"Matrix"),a=>a.transpose?a.transpose():m.Transpose(a),"FlowGraphTransposeBlock",t)}}r("FlowGraphTransposeBlock",E);class _ extends V{constructor(t){super(e(t?.matrixType||"Matrix"),k,a=>a.determinant(),"FlowGraphDeterminantBlock",t)}}r("FlowGraphDeterminantBlock",_);class b extends V{constructor(t){super(e(t?.matrixType||"Matrix"),e(t?.matrixType||"Matrix"),a=>a.inverse?a.inverse():m.Invert(a),"FlowGraphInvertMatrixBlock",t)}}r("FlowGraphInvertMatrixBlock",b);class v extends D{constructor(t){super(e(t?.matrixType||"Matrix"),e(t?.matrixType||"Matrix"),e(t?.matrixType||"Matrix"),(a,i)=>i.multiply(a),"FlowGraphMatrixMultiplicationBlock",t)}}r("FlowGraphMatrixMultiplicationBlock",v);class Q extends M{constructor(t){super(t),this.input=this.registerDataInput("input",w),this.position=this.registerDataOutput("position",u),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",g),this.scaling=this.registerDataOutput("scaling",u),this.isValid=this.registerDataOutput("isValid",T,!1)}_updateOutputs(t){const a=t._getExecutionVariable(this,"executionId",-1),i=t._getExecutionVariable(this,"cachedPosition",null),s=t._getExecutionVariable(this,"cachedRotation",null),h=t._getExecutionVariable(this,"cachedScaling",null);if(a===t.executionId&&i&&s&&h)this.position.setValue(i,t),this.rotationQuaternion.setValue(s,t),this.scaling.setValue(h,t);else{const l=this.input.getValue(t),p=i||new n,c=s||new x,d=h||new n,F=Math.round(l.m[3]*1e4)/1e4,G=Math.round(l.m[7]*1e4)/1e4,y=Math.round(l.m[11]*1e4)/1e4,B=Math.round(l.m[15]*1e4)/1e4;if(F!==0||G!==0||y!==0||B!==1){this.isValid.setValue(!1,t),this.position.setValue(n.Zero(),t),this.rotationQuaternion.setValue(x.Identity(),t),this.scaling.setValue(n.One(),t);return}const I=l.decompose(d,c,p);this.isValid.setValue(I,t),this.position.setValue(p,t),this.rotationQuaternion.setValue(c,t),this.scaling.setValue(d,t),t._setExecutionVariable(this,"cachedPosition",p),t._setExecutionVariable(this,"cachedRotation",c),t._setExecutionVariable(this,"cachedScaling",d),t._setExecutionVariable(this,"executionId",t.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}r("FlowGraphMatrixDecompose",Q);class R extends M{constructor(t){super(t),this.position=this.registerDataInput("position",u),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",g),this.scaling=this.registerDataInput("scaling",u),this.value=this.registerDataOutput("value",w)}_updateOutputs(t){const a=t._getExecutionVariable(this,"executionId",-1),i=t._getExecutionVariable(this,"cachedMatrix",null);if(a===t.executionId&&i)this.value.setValue(i,t);else{const s=m.Compose(this.scaling.getValue(t),this.rotationQuaternion.getValue(t),this.position.getValue(t));this.value.setValue(s,t),t._setExecutionVariable(this,"cachedMatrix",s),t._setExecutionVariable(this,"executionId",t.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}r("FlowGraphMatrixCompose",R);export{_ as FlowGraphDeterminantBlock,b as FlowGraphInvertMatrixBlock,R as FlowGraphMatrixComposeBlock,Q as FlowGraphMatrixDecomposeBlock,v as FlowGraphMatrixMultiplicationBlock,E as FlowGraphTransposeBlock};
